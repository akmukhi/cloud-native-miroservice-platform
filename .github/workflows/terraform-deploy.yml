name: Terraform Infrastructure Deployment

on:
  push:
    branches: [ main ]
    paths: [ 'terraform/**' ]
  pull_request:
    branches: [ main ]
    paths: [ 'terraform/**' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      action:
        description: 'Terraform action'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: "1.5.0"

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event.inputs.action == 'plan'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY_${{ upper(github.event.inputs.environment || 'DEV') }} }}
        project_id: ${{ secrets.GCP_PROJECT_ID_${{ upper(github.event.inputs.environment || 'DEV') }} }}
        
    - name: Setup Terraform Backend
      run: |
        cd terraform/environments/${{ github.event.inputs.environment || 'dev' }}
        
        # Create GCS bucket for Terraform state if it doesn't exist
        gsutil ls gs://watch-notify-terraform-state-${{ secrets.GCP_PROJECT_ID_${{ upper(github.event.inputs.environment || 'DEV') }} }} || \
        gsutil mb gs://watch-notify-terraform-state-${{ secrets.GCP_PROJECT_ID_${{ upper(github.event.inputs.environment || 'DEV') }} }}
        
    - name: Terraform Init
      run: |
        cd terraform/environments/${{ github.event.inputs.environment || 'dev' }}
        terraform init \
          -backend-config="bucket=watch-notify-terraform-state-${{ secrets.GCP_PROJECT_ID_${{ upper(github.event.inputs.environment || 'DEV') }} }}" \
          -backend-config="prefix=terraform/state/${{ github.event.inputs.environment || 'dev' }}"
          
    - name: Terraform Format Check
      run: |
        cd terraform/environments/${{ github.event.inputs.environment || 'dev' }}
        terraform fmt -check -recursive
        
    - name: Terraform Validate
      run: |
        cd terraform/environments/${{ github.event.inputs.environment || 'dev' }}
        terraform validate
        
    - name: Terraform Plan
      run: |
        cd terraform/environments/${{ github.event.inputs.environment || 'dev' }}
        terraform plan \
          -var="db_password=${{ secrets.DB_PASSWORD_${{ upper(github.event.inputs.environment || 'DEV') }} }}" \
          -var="mail_username=${{ secrets.MAIL_USERNAME_${{ upper(github.event.inputs.environment || 'DEV') }} }}" \
          -var="mail_password=${{ secrets.MAIL_PASSWORD_${{ upper(github.event.inputs.environment || 'DEV') }} }}" \
          -var="admin_password=${{ secrets.ADMIN_PASSWORD_${{ upper(github.event.inputs.environment || 'DEV') }} }}" \
          -out=tfplan
          
    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v3
      with:
        name: terraform-plan-${{ github.event.inputs.environment || 'dev' }}
        path: terraform/environments/${{ github.event.inputs.environment || 'dev' }}/tfplan
        
    - name: Comment PR with Plan
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const plan = fs.readFileSync('terraform/environments/${{ github.event.inputs.environment || 'dev' }}/tfplan', 'utf8');
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## Terraform Plan for ${{ github.event.inputs.environment || 'dev' }} Environment\n\n\`\`\`hcl\n${plan}\n\`\`\``
          });
          
  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.event.inputs.action == 'apply' && github.ref == 'refs/heads/main'
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY_${{ upper(github.event.inputs.environment || 'DEV') }} }}
        project_id: ${{ secrets.GCP_PROJECT_ID_${{ upper(github.event.inputs.environment || 'DEV') }} }}
        
    - name: Download Terraform Plan
      uses: actions/download-artifact@v3
      with:
        name: terraform-plan-${{ github.event.inputs.environment || 'dev' }}
        path: terraform/environments/${{ github.event.inputs.environment || 'dev' }}
        
    - name: Setup Terraform Backend
      run: |
        cd terraform/environments/${{ github.event.inputs.environment || 'dev' }}
        terraform init \
          -backend-config="bucket=watch-notify-terraform-state-${{ secrets.GCP_PROJECT_ID_${{ upper(github.event.inputs.environment || 'DEV') }} }}" \
          -backend-config="prefix=terraform/state/${{ github.event.inputs.environment || 'dev' }}"
          
    - name: Terraform Apply
      run: |
        cd terraform/environments/${{ github.event.inputs.environment || 'dev' }}
        terraform apply -auto-approve tfplan
        
    - name: Get Terraform Outputs
      run: |
        cd terraform/environments/${{ github.event.inputs.environment || 'dev' }}
        terraform output -json > outputs.json
        
    - name: Upload Terraform Outputs
      uses: actions/upload-artifact@v3
      with:
        name: terraform-outputs-${{ github.event.inputs.environment || 'dev' }}
        path: terraform/environments/${{ github.event.inputs.environment || 'dev' }}/outputs.json
        
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#infrastructure'
        text: |
          üèóÔ∏è Infrastructure Deployment
          Environment: ${{ github.event.inputs.environment || 'dev' }}
          Status: ${{ job.status }}
          Triggered by: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'destroy'
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY_${{ upper(github.event.inputs.environment || 'DEV') }} }}
        project_id: ${{ secrets.GCP_PROJECT_ID_${{ upper(github.event.inputs.environment || 'DEV') }} }}
        
    - name: Setup Terraform Backend
      run: |
        cd terraform/environments/${{ github.event.inputs.environment || 'dev' }}
        terraform init \
          -backend-config="bucket=watch-notify-terraform-state-${{ secrets.GCP_PROJECT_ID_${{ upper(github.event.inputs.environment || 'DEV') }} }}" \
          -backend-config="prefix=terraform/state/${{ github.event.inputs.environment || 'dev' }}"
          
    - name: Terraform Destroy
      run: |
        cd terraform/environments/${{ github.event.inputs.environment || 'dev' }}
        terraform destroy \
          -var="db_password=${{ secrets.DB_PASSWORD_${{ upper(github.event.inputs.environment || 'DEV') }} }}" \
          -var="mail_username=${{ secrets.MAIL_USERNAME_${{ upper(github.event.inputs.environment || 'DEV') }} }}" \
          -var="mail_password=${{ secrets.MAIL_PASSWORD_${{ upper(github.event.inputs.environment || 'DEV') }} }}" \
          -var="admin_password=${{ secrets.ADMIN_PASSWORD_${{ upper(github.event.inputs.environment || 'DEV') }} }}" \
          -auto-approve
          
    - name: Notify destruction status
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#infrastructure'
        text: |
          üóëÔ∏è Infrastructure Destruction
          Environment: ${{ github.event.inputs.environment || 'dev' }}
          Status: ${{ job.status }}
          Triggered by: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
