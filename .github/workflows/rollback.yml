name: Emergency Rollback

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to rollback'
        required: true
        default: 'production'
        type: choice
        options:
          - development
          - staging
          - production
      version:
        description: 'Version to rollback to (leave empty for previous version)'
        required: false
        type: string

env:
  REGISTRY: gcr.io

jobs:
  rollback:
    name: Rollback ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY_${{ upper(github.event.inputs.environment) }} }}
        project_id: ${{ secrets.GCP_PROJECT_ID_${{ upper(github.event.inputs.environment) }} }}
        
    - name: Get previous version
      id: get-version
      run: |
        if [ -z "${{ github.event.inputs.version }}" ]; then
          # Get the previous version from Cloud Run revisions
          PREVIOUS_VERSION=$(gcloud run revisions list \
            --service=watch-notification-service-${{ github.event.inputs.environment }} \
            --region=us-central1 \
            --format="value(metadata.name)" \
            --limit=2 | tail -n 1)
          echo "version=$PREVIOUS_VERSION" >> $GITHUB_OUTPUT
        else
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        fi
        
    - name: Rollback Cloud Run service
      uses: google-github-actions/deploy-cloudrun@v2
      with:
        service: watch-notification-service-${{ github.event.inputs.environment }}
        region: us-central1
        image: ${{ env.REGISTRY }}/${{ secrets.GCP_PROJECT_ID_${{ upper(github.event.inputs.environment) }} }}/watch-notification-service:${{ steps.get-version.outputs.version }}
        
    - name: Verify rollback
      run: |
        echo "Verifying rollback to version ${{ steps.get-version.outputs.version }}"
        
        # Wait for service to be ready
        sleep 30
        
        # Health check
        SERVICE_URL=$(gcloud run services describe watch-notification-service-${{ github.event.inputs.environment }} \
          --region=us-central1 \
          --format="value(status.url)")
          
        curl -f $SERVICE_URL/actuator/health || exit 1
        
        echo "âœ… Rollback verification successful"
        
    - name: Notify rollback status
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          ðŸ”„ Emergency Rollback
          Environment: ${{ github.event.inputs.environment }}
          Version: ${{ steps.get-version.outputs.version }}
          Status: ${{ job.status }}
          Triggered by: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Create rollback record
      uses: actions/github-script@v7
      if: success()
      with:
        script: |
          const { data: deployment } = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: '${{ github.event.inputs.environment }}',
            description: 'Emergency rollback to version ${{ steps.get-version.outputs.version }}',
            auto_merge: false,
            required_contexts: []
          });
          
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: deployment.id,
            state: 'success',
            description: 'Rollback successful'
          });
