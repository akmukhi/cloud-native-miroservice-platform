name: Deploy to Development

on:
  push:
    branches: [ develop ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: 'false'
        type: boolean

env:
  ENVIRONMENT: dev
  REGISTRY: gcr.io
  IMAGE_NAME: ${{ secrets.GCP_PROJECT_ID }}/watch-notification-service

jobs:
  deploy:
    name: Deploy to Development
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven'
        
    - name: Run tests
      run: |
        cd backend
        mvn clean test
      if: ${{ github.event.inputs.force_deploy != 'true' }}
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY_DEV }}
        project_id: ${{ secrets.GCP_PROJECT_ID_DEV }}
        
    - name: Configure Docker for GCR
      run: gcloud auth configure-docker
      
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev-latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Deploy to Cloud Run
      uses: google-github-actions/deploy-cloudrun@v2
      with:
        service: watch-notification-service-dev
        region: us-central1
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        env_vars: |
          SPRING_PROFILES_ACTIVE=prod
          DB_HOST=${{ secrets.DB_HOST_DEV }}
          DB_PORT=5432
          DB_NAME=watchnotify
          DB_USERNAME=postgres
        secrets: |
          DB_PASSWORD=db-password:latest
          MAIL_USERNAME=mail-username:latest
          MAIL_PASSWORD=mail-password:latest
          ADMIN_PASSWORD=admin-password:latest
        flags: |
          --memory=512Mi
          --cpu=1000m
          --max-instances=5
          --min-instances=0
          --allow-unauthenticated
          
    - name: Update Cloud Scheduler
      run: |
        gcloud scheduler jobs update http watch-notification-scheduler-dev \
          --schedule="*/30 * * * *" \
          --uri="${{ steps.deploy.outputs.url }}/api/notifications/send" \
          --http-method=POST \
          --headers="Content-Type=application/json" \
          --message-body='{"watchReleaseId":1,"sendEmail":true,"sendSms":false,"sendPush":true}'
      if: success()
      
    - name: Run smoke tests
      run: |
        echo "Running smoke tests against ${{ steps.deploy.outputs.url }}"
        curl -f ${{ steps.deploy.outputs.url }}/actuator/health || exit 1
        curl -f ${{ steps.deploy.outputs.url }}/api/users || exit 1
      if: success()
      
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          Deployment to Development Environment
          Status: ${{ job.status }}
          Commit: ${{ github.sha }}
          URL: ${{ steps.deploy.outputs.url }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Create deployment record
      uses: actions/github-script@v7
      if: success()
      with:
        script: |
          const { data: deployment } = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: 'development',
            description: 'Deployment to development environment',
            auto_merge: false,
            required_contexts: []
          });
          
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: deployment.id,
            state: 'success',
            environment_url: '${{ steps.deploy.outputs.url }}',
            description: 'Deployment successful'
          });
